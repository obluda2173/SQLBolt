#+title: SQL Lesson 13: Inserting rows

We previously described a table in a database as a two-dimansional set of rows and colums, with the columns being the properties and the rows being instances of the entity in the table. In SQL, the *database schema* is what describes the structure of each table, and the datatypes that each column of the table can contain.

#+BEGIN_QUOTE
For exammple in a *Movies* table, the values in the *Year* column must be an integer, and the values in the *Title* column must be a string
#+END_QUOTE

This fixed structure is what allows a database to be efficient, and consistent despite storing millions or even billions of rows

* Inserting new data
When inserting data into a database, we need to use an *INSERT* statement, which declares which table to write into, the columns of data that we are filling, and one or more rows of data to insert. In general, each row of data you insert should contain values for every corresponding column in the table. You can insert multiple rows at a time by just listing them sequentially

#+BEGIN_SRC sql
INSERT INTO mytable
VALUES (value_or_expr, another_value_or_expr, ...),
       (value_or_expr_2, another_value_or_expr_2, ...),
       ...;
#+END_SRC

In some cases, if you have incomplete data and the table contains columns that support default values, you can insert rows with only the columns of data you have by specifying them explicitly

#+BEGIN_SRC sql
INSERT INTO mytable
(column, another_column, ...)
VALUES (value_or_expr, another_value_or_expr, ...),
       (value_or_expr_2, another_value_or_expr_2, ...),
       ...;
#+END_SRC

In these cases, the number of values need to match the number of columns specified. Despite this being a more verbose statement to write, inserting values this way has the benefits of being forward compatible. For example, if you add a new column to the table with a default value, no hardcoded *INSERT* statements will have to change as a result to accommodate that change
